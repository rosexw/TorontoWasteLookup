{"version":3,"sources":["WasteItem.js","App.js","serviceWorker.js","index.js"],"names":["unescapeHTML","html","escapeEl","document","createElement","innerHTML","textContent","WasteItem","props","favIcon","isFave","react_default","a","className","onClick","toggleFave","title","dangerouslySetInnerHTML","__html","body","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchTerm","faves","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","value","results","_this2","searching","fetch","then","response","json","data","filter","searchItem","keywords","includes","preventDefault","wasteItem","find","fave","concat","toConsumableArray","objectSpread","_this3","map","result","src_WasteItem","key","onSubmit","type","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a7d40f8.chunk.js","sourcesContent":["import React from 'react';\n\nfunction unescapeHTML(html) {\n    var escapeEl = document.createElement('textarea');\n    escapeEl.innerHTML = html;\n    return escapeEl.textContent;\n }\n\nfunction WasteItem(props) {\n    const favIcon = props.isFave ?\n        <i className=\"fa fa-lg fa-star isFave\"></i> :\n        <i className=\"fa fa-lg fa-star isNotFave\"></i>;\n    return(\n        <tr className=\"WasteItem-row\">\n            <td><button className=\"fav-button\" onClick={props.toggleFave}>{favIcon}</button></td>\n            <td className=\"WasteItem-title\">\n                {props.title}\n            </td>\n            <td className=\"WasteItem-body\" dangerouslySetInnerHTML={{__html: unescapeHTML(props.body)}}></td>\n        </tr>\n    );\n}\n\nexport default WasteItem;","import React, { Component } from 'react';\nimport './App.css';\nimport WasteItem from './WasteItem.js';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchTerm: '',\n      faves: [],\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({searchTerm: event.target.value});\n    if (event.target.value === \"\") {\n      this.setState({results: []});\n    }\n  }\n\n  handleSubmit(event) {\n    this.setState({searching: true});\n    fetch('https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000')\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        const results = data.filter((searchItem) =>\n          searchItem.keywords.includes(this.state.searchTerm) || searchItem.title.includes(this.state.searchTerm)\n      )\n        this.setState({results, searching: false});\n      });\n    event.preventDefault();\n  }\n\n  isFave(wasteItem) {\n    return this.state.faves.find(fave => fave.title === wasteItem.title);\n  }\n\n  toggleFave(wasteItem) {\n    if (this.isFave(wasteItem)){\n      this.setState((state) => ({\n        faves: state.faves.filter(fave => fave.title !== wasteItem.title),\n      }));\n    } else {\n      this.setState((state) => ({\n        faves: [...state.faves, {...wasteItem}],\n      }));\n    }\n  }\n\n  render() {\n    const searching = this.state.searching && <div className=\"searching\">Searching...</div>;\n\n    const results = this.state.results && !this.state.searching &&\n      this.state.results.map(result => {\n        return <WasteItem key={result.title} title={result.title} body={result.body} toggleFave={() => this.toggleFave(result)} isFave={this.isFave(result)}/>;\n      });\n\n    const faves = this.state.faves.map(fave => {\n      return <WasteItem key={fave.title} title={fave.title} body={fave.body} toggleFave={() => this.toggleFave(fave)} isFave={this.isFave(fave)}/>;\n    });\n\n    return (\n      <div className=\"App\">\n        <header className=\"mainHeader\">Toronto Waste Lookup</header>\n        <div className=\"search-container\">\n          <form className=\"search-form\" onSubmit={this.handleSubmit}>\n            <input type=\"text\" placeholder=\"Search for an item\" value={this.state.searchTerm} onChange={this.handleChange} />\n            <button type=\"submit\"><i className=\"fa fa-search fa-sm fa-flip-horizontal\"></i></button>\n          </form>\n        </div>\n        {searching}\n        <table className=\"results\">\n          <tbody>\n            {results}\n          </tbody>\n        </table>\n        <div className=\"faves\">\n          <h2>Favourites</h2>\n          <table className=\"results\">\n            <tbody>\n              {faves}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}